from aiogram.types import KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from mongo_db import db


async def start_kb():
    chats_info = await db.get_chats_info()
    builder = InlineKeyboardBuilder()
    for el in chats_info:
        builder.add(InlineKeyboardButton(
            text=el['title'], callback_data='info' + str(el['_id'])
        ))
    return builder.adjust(1).as_markup()


async def chat_info_kb(chatid: str, group_id):

    # create a hi and bye
    hi_and_bye = [InlineKeyboardButton(text='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ/–ü—Ä–æ—â–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                                       callback_data='hi_and_bye_menu' + str(chatid))]

    # create a send posts
    rassilka = [InlineKeyboardButton(
        text='–ü–æ—Å—Ç–∏–Ω–≥ –¢–û–õ–¨–ö–û –í –ß–ê–¢ üìù', callback_data='rass_chat' + str(chatid))]
    if group_id:
        group_title = await db.get_group_info_by_id(group_id)
        rassilka.append(InlineKeyboardButton(
            text='–ü–æ—Å—Ç–∏–Ω–≥ –≤ –≥—Ä—É–ø–ø—É —á–∞—Ç–æ–≤ üìù', callback_data='rass_group' + str(chatid)))

    # create a spam settings
    spam_settings = [InlineKeyboardButton(
        text='–§–∏–ª—å—Ç—Ä —Å–ø–∞–º–∞ üö´', callback_data='spam_settings_chat' + str(chatid))]

    # create a admin add remove
    admin_add_remove = [InlineKeyboardButton(
        text='–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –≤ —á–∞—Ç üë•', callback_data='admin_add_remove' + str(chatid))]

    # create the text config file
    text_conf = [InlineKeyboardButton(
        text='–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üîí', callback_data='text_conf' + str(chatid))]

    # create a delete posts
    delete_posts = [InlineKeyboardButton(
        text='–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ üóë', callback_data='delete_posts' + str(chatid))]

    # create reputation system
    rep_system = [InlineKeyboardButton(
        text='–ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', callback_data='rep_sys_inf' + str(chatid))]

    # create for the restrict all
    restrict_all = [InlineKeyboardButton(
        text='–û—Ç–∫—Ä—ã—Ç—å/–ó–∞–∫—Ä—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ —á–∞—Ç)', callback_data='restrict_all_inf' + str(chatid))]

    # create for deleting chat
    delete_chat = [InlineKeyboardButton(
        text='–£–¥–∞–ª–∏—Ç—å —á–∞—Ç', callback_data='ddd_chat' + str(chatid)
    )]

    builder = InlineKeyboardMarkup(
        inline_keyboard=[
            hi_and_bye,
            rassilka,
            spam_settings,
            admin_add_remove,
            text_conf,
            delete_posts,
            rep_system,
            restrict_all,
            delete_chat
        ],
    )
    return builder


async def restrict_all_kb(chat_id):
    builder = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text='–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –≤—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è', callback_data='restrict_all_on' + str(chat_id))],
        [InlineKeyboardButton(
            text='–†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è', callback_data='restrict_all_off' + str(chat_id))],
        [InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥ üîô', callback_data='info' + str(chat_id))]
    ])
    return builder


async def rep_sys_info(chat_id):
    builder = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–ø—É—Ç–∞—Ü–∏–∏',
                              callback_data='rep_sys_change' + str(chat_id))],
        [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏',
                              callback_data='rep_w_add' + str(chat_id))],
        [InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å —Å–ª–æ–≤–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏',
                              callback_data='rep_w_remove' + str(chat_id))],
        [InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥ üîô', callback_data='info' + str(chat_id))]
    ])
    return builder


async def back_to_rep_sys(chat_id):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text='–ù–∞–∑–∞–¥ üîô', callback_data='rep_sys_inf' + str(chat_id)))
    return builder.adjust(1).as_markup()


async def back_to_restrict_all(chat_id):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text='–ù–∞–∑–∞–¥ üîô', callback_data='restrict_all_inf' + str(chat_id)))
    return builder.adjust(1).as_markup()


async def group_kb(groups):
    builder = InlineKeyboardBuilder()

    for el in groups:
        builder.add(
            InlineKeyboardButton(
                text=el['title'], callback_data='group_inf' + str(el['_id']))
        )
        builder.add(
            InlineKeyboardButton(
                text='–£–¥–∞–ª–∏—Ç—å', callback_data='del_group' + str(el['_id']))
        )
    builder.add(InlineKeyboardButton(
        text='–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data='add_group'))
    return builder.adjust(2).as_markup()


async def group_info_kb(chats, group_id):
    builder = InlineKeyboardBuilder()

    for el in chats:
        builder.add(
            InlineKeyboardButton(
                text=el['title'], callback_data='info' + str(el['_id'])),
        )
        builder.add(
            InlineKeyboardButton(
                text='–£–¥–∞–ª–∏—Ç—å —á–∞—Ç', callback_data='del_chat_from_group' + str(el['_id']))
        )
    builder.add(
        InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç –≤ –≥—Ä—É–ø–ø—É',
                             callback_data='add_new_chat_to_group' + str(group_id))
    )
    return builder.adjust(2).as_markup()


async def add_chat_to_group_kb(chats, group_id):
    builder = InlineKeyboardBuilder()

    for el in chats:
        builder.add(InlineKeyboardButton(
            text=el['title'], callback_data='add_chat_to_group_action' +
            str(el['_id']) + ':' + group_id
        ))
    return builder.adjust(1).as_markup()


async def get_all_ads(ads):
    builder = InlineKeyboardBuilder()

    for ad in ads:
        builder.add(InlineKeyboardButton(
            text=ad['time'], callback_data='edit_ad' + str(ad['_id'])
        ))
        builder.add(InlineKeyboardButton(
            text='–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data='del_ad' + str(ad['_id'])
        ))
    return builder.adjust(2).as_markup()


async def spam_menu_kb(chat_id):
    builder = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Å–ø–∞–º —Å–ª–æ–≤–∞',
                              callback_data='add_spam_w' + chat_id)],
        [InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å —Å–ø–∞–º —Å–ª–æ–≤–∞',
                              callback_data='remove_spam_w' + chat_id)],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π',
                              callback_data='peresilka_change' + chat_id)],
        [InlineKeyboardButton(text='–ò–∑–∞–º–µ–Ω–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–æ–∫',
                              callback_data='ssilka_change' + chat_id)],
        [InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∞–Ω–∫—Ü–∏–π',
                              callback_data='spam_ssankcii' + chat_id)],
        [InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è',
                              callback_data='spam_time_life' + chat_id)],
        [InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥ üîô', callback_data='info' + str(chat_id))]
    ])
    return builder


async def back_to_text_conf(chat_id):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text='–ù–∞–∑–∞–¥ üîô', callback_data='text_conf' + str(chat_id)))
    return builder.adjust(1).as_markup()


async def back_to_spam_settings_chat(chat_id):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text='–ù–∞–∑–∞–¥ üîô', callback_data='spam_settings_chat' + str(chat_id)))
    return builder.adjust(1).as_markup()


async def back_to_info(chat_id):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text='–ù–∞–∑–∞–¥ üîô', callback_data='info' + str(chat_id)))
    return builder.adjust(1).as_markup()


async def spam_sanctions(chat_id):
    chat = await db.get_chat_info_by_id(chat_id)
    sanction = chat.get('sanction', False)

    sss = [
        ['–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', 'warn'],
        ['–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ', 'mute'],
        ['–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞', 'ban'],
        ['–ò—Å–∫–ª—é—á–µ–Ω–∏–µ', 'kick']
    ]

    builder = InlineKeyboardBuilder()
    for name in sss:
        if name[1] == sanction:
            builder.add(InlineKeyboardButton(
                text=name[0] + '‚úÖ',
                callback_data='change_sanction' + name[1] + chat_id
            ))
        else:
            builder.add(InlineKeyboardButton(
                text=name[0] + '‚ùå',
                callback_data='change_sanction' + name[1] + chat_id
            ))
    builder.add(InlineKeyboardButton(
        text='–ù–∞–∑–∞–¥ üîô', callback_data='spam_settings_chat' + str(chat_id)))
    return builder.adjust(1).as_markup()


async def admin_add_remove(admins, chat_id):
    builder = InlineKeyboardBuilder()

    for admin in admins:
        builder.add(InlineKeyboardButton(
            text=f'–£–¥–∞–ª–∏—Ç—å {admin.user.first_name}',
            callback_data='delete_admin' + str(admin.user.id) + str(chat_id)
        ))
    builder.add(InlineKeyboardButton(
        text='–ù–∞–∑–∞–¥ üîô', callback_data='info' + str(chat_id)))
    return builder.adjust(1).as_markup()


async def text_conf_kb(chat_id):
    builder = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ /warn',
                              callback_data='text_change_warn' + str(chat_id))],
        [InlineKeyboardButton(text='–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π /mute',
                              callback_data='text_change_mute' + str(chat_id))],
        [InlineKeyboardButton(text='–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ /ban',
                              callback_data='text_change_ban' + str(chat_id))],
        [InlineKeyboardButton(text='–ò—Å–∫–ª—é—á–µ–Ω–∏–µ /kick',
                              callback_data='text_change_kick' + str(chat_id))],
        [InlineKeyboardButton(text='–°–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–∏–π /un',
                              callback_data='text_change_un' + str(chat_id))],
        [InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥ üîô', callback_data='info' + str(chat_id))]
    ])
    return builder


async def hi_and_buy_menu(chat_id):
    builder = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                              callback_data='hi_config' + str(chat_id))],
        [InlineKeyboardButton(text='–ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                              callback_data='bye_config' + str(chat_id))],
        [InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥ üîô', callback_data='info' + str(chat_id))]
    ])
    return builder


async def bye_menu(chat_id):
    builder = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
                              callback_data='bye_message_change' + str(chat_id))],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–æ —É–¥–∞–ª–µ–Ω–∏—è',
                              callback_data='bye_time_change' + str(chat_id))],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üîô',
                              callback_data='info' + str(chat_id))]
    ])
    return builder


async def new_hi_config(chat_id):
    builder = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ü–µ—Ä–µ–ª–∏–≤ –≤ –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã',
                              callback_data='hi_type_pereliv' + str(chat_id))],
        [InlineKeyboardButton(text='–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π',
                              callback_data='hi_type_priglasit' + str(chat_id))],
        [InlineKeyboardButton(text='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ —Ç–æ –∏ –¥—Ä—É–≥–æ–µ',
                              callback_data='hi_type_combined' + str(chat_id))],
        [InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥ üîô', callback_data='hi_and_bye_menu' + str(chat_id))]
    ])
    return builder


async def hi_config_pereliv(chat_id):
    builder = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã',
                              callback_data='hi_pereliv_chanells_menu' + str(chat_id))],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
                              callback_data='hi_message_change' + str(chat_id))],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–æ —É–¥–∞–ª–µ–Ω–∏—è',
                              callback_data='hi_time_change' + str(chat_id))],
        [InlineKeyboardButton(text='–ü–æ–º–µ–Ω—è—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–í–°–ï –£–î–ê–õ–ò–¢–°–Ø)',
                              callback_data='new_hi_confiig' + str(chat_id))],
        [InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥ üîô', callback_data='hi_and_bye_menu' + str(chat_id))]
    ])
    return builder


async def back_to_pereliv(chat_id):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text='–ù–∞–∑–∞–¥ üîô', callback_data='hi_and_bye_menu' + str(chat_id)))
    return builder.adjust(1).as_markup()


async def back_to_bye_config(chat_id):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text='–ù–∞–∑–∞–¥ üîô', callback_data='bye_config' + str(chat_id)))
    return builder.adjust(1).as_markup()


async def hi_config_priglasit(chat_id):
    builder = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π',
                              callback_data='hi_members_came_change' + str(chat_id))],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
                              callback_data='hi_message_change' + str(chat_id))],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–æ —É–¥–∞–ª–µ–Ω–∏—è',
                              callback_data='hi_time_change' + str(chat_id))],
        [InlineKeyboardButton(text='–ü–æ–º–µ–Ω—è—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–í–°–ï –£–î–ê–õ–ò–¢–°–Ø)',
                              callback_data='new_hi_confiig' + str(chat_id))],
        [InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥ üîô', callback_data='hi_and_bye_menu' + str(chat_id))]
    ])
    return builder


async def hi_config_combined(chat_id):
    builder = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã',
                              callback_data='hi_pereliv_chanells_menu' + str(chat_id))],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π',
                              callback_data='hi_members_came_change' + str(chat_id))],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
                              callback_data='hi_message_change' + str(chat_id))],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–æ —É–¥–∞–ª–µ–Ω–∏—è',
                              callback_data='hi_time_change' + str(chat_id))],
        [InlineKeyboardButton(text='–ü–æ–º–µ–Ω—è—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–í–°–ï –£–î–ê–õ–ò–¢–°–Ø)',
                              callback_data='new_hi_confiig' + str(chat_id))],
        [InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥ üîô', callback_data='hi_and_bye_menu' + str(chat_id))]
    ])
    return builder


async def hi_pereliv_chanells(channels, chat_id):
    builder = InlineKeyboardBuilder()
    for el in channels:
        builder.add(InlineKeyboardButton(text=f'–£–î–ê–õ–ò–¢–¨ {el}',
                                         callback_data='hi_del_channel' + el))
    builder.add(InlineKeyboardButton(
        text='–ù–∞–∑–∞–¥ üîô', callback_data='hi_type_pereliv' + str(chat_id)))
    return builder.adjust(1).as_markup()


async def welcome_message_pereliv(channels):
    builder = InlineKeyboardBuilder()
    for el in channels:
        builder.add(InlineKeyboardButton(text=f'–ü–æ–¥–ø–∏—à–∏—Å—å',
                                         url=el.invite_link))
    return builder.adjust(1).as_markup()


async def start_kbkkbkb(link):
    builder = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–í–æ—Ç –Ω–∞—à–∞ –≥—Ä—É–ø–ø–∞', url=link.invite_link)]
    ])
    return builder
