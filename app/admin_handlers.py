from aiogram import Router, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, CallbackQuery
from loguru import logger
from utils import is_admin
from mongo_db import db
import app.keyboards as kb
from asyncio import sleep

router_admin_handlers = Router()


@router_admin_handlers.message(CommandStart(deep_link=False))
async def command_start(message: Message, command: CommandObject):
    if not is_admin(message):
        print(message.text, command)
        logger.error('oooooohh')
        args = command.args
        chat_id, user_id = args.split('00000')
        event_user_id = message.from_user.id
        logger.info(chat_id, user_id)
        await db.ref_user_came(chat_id, user_id, event_user_id)

        ch_info = await db.get_chat_info_by_id(chat_id)
        link = await message.bot.create_chat_invite_link(chat_id=chat_id)
        await message.answer(
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤ –≥—Ä—É–ø–ø—É!',
            reply_markup=await kb.start_kbkkbkb(ch_info.get('link', link))
        )
        return

    if message.chat.type != 'private':
        return

    logger.error('yay')
    await message.answer(
        text=f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! üëã
–í–Ω–∏–∑—É –≤—ã –≤–∏–¥–∏—Ç–µ –∫–Ω–æ–ø–∫–∏, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤. üóÇÔ∏è
–ß—Ç–æ–±—ã –±–æ—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —á–∞—Ç–µ, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç. ‚ûï
2Ô∏è‚É£ –ù–∞–∑–Ω–∞—á—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. üëë
3Ô∏è‚É£ –í —á–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_exec, –ª–∏–±–æ –≤ –ª—Å –±–æ—Ç–∞ /add <id —á–∞—Ç–∞>. üìù

–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä—É–ø–ø—ã –ø—Ä–∏ –ø–æ–º–æ—â–∏ /group
""",
        reply_markup=await kb.start_kb()
    )


@router_admin_handlers.message(CommandStart(deep_link=True))
async def command_start(message: Message, command: CommandObject):
    if not is_admin(message):
        print(message.text, command)
        logger.error('oooooohh')
        args = command.args
        chat_id, user_id = args.split('00000')
        logger.info(chat_id, user_id)
        await db.ref_user_came(chat_id, user_id)

        ch_info = await db.get_chat_info_by_id(chat_id)
        link = await message.bot.create_chat_invite_link(chat_id=chat_id)
        await message.answer(
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤ –≥—Ä—É–ø–ø—É!',
            reply_markup=await kb.start_kbkkbkb(ch_info.get('link', link))
        )
        return

    if message.chat.type != 'private':
        return

    logger.error('yay')
    await message.answer(
        text=f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! üëã
–í–Ω–∏–∑—É –≤—ã –≤–∏–¥–∏—Ç–µ –∫–Ω–æ–ø–∫–∏, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤. üóÇÔ∏è
–ß—Ç–æ–±—ã –±–æ—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —á–∞—Ç–µ, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç. ‚ûï
2Ô∏è‚É£ –ù–∞–∑–Ω–∞—á—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. üëë
3Ô∏è‚É£ –í —á–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_exec, –ª–∏–±–æ –≤ –ª—Å –±–æ—Ç–∞ /add <id —á–∞—Ç–∞>. üìù

–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä—É–ø–ø—ã –ø—Ä–∏ –ø–æ–º–æ—â–∏ /group
""",
        reply_markup=await kb.start_kb()
    )


@router_admin_handlers.message(Command('add'))
async def command_add_group(message: Message):
    if not is_admin(message):
        logger.warning(
            f'Somebody (not an admin) tried to access the bot logic!!! His info -> {message.from_user}')
        return
    if message.chat.type != 'private':
        return
    try:
        chat_id = message.text.split()[-1]

        chat_inf = {
            '_id': int(chat_id),
            'title': chat_id,  # FIXME: –∑–∞–≥–ª—É—à–∫–∞ –ø–æ title –≥—Ä—É–ø–ø—ã, –∑–Ω–∞—è —Ç–æ–ª—å–∫–æ –µ–µ id
        }
        ress = await db.insert_chat(chat_inf)

        if ress is None:
            await message.answer(text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏...')
        elif not ress:
            await message.answer(text='–¢–∞–∫–æ–π —á–∞—Ç —É–∂–µ –µ—Å—Ç—å!')
        else:
            await message.answer(text='–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
    except:
        await message.answer(text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏...')


@router_admin_handlers.callback_query(F.data.contains('ddd_chat'))
async def ddd_chat(callback: CallbackQuery):
    chat_id = callback.data.replace('ddd_chat', '')
    await db.delete_chat_by_id(chat_id)

    await callback.answer('')
    await callback.message.answer(
        text='–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!'
    )


@router_admin_handlers.message(Command('add_exec'))
async def command_add_exec(message: Message):
    if not is_admin(message):
        logger.warning(
            f'Somebody (not an admin) tried to access the bot logic!!! His info -> {message.from_user}')
        return

    try:

        if message.chat.type == 'private':
            await message.answer('–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ –≥—Ä—É–ø–ø–µ!')
        else:
            print(message)
            chat_inf = {
                '_id': message.chat.id,
                'title': message.chat.title,
            }
            ress = await db.insert_chat(chat_inf)

            if ress is None:
                result_message = await message.answer(text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏...')
            elif not ress:
                result_message = await message.answer(text='–¢–∞–∫–æ–π —á–∞—Ç —É–∂–µ –µ—Å—Ç—å!')
            else:
                result_message = await message.answer(text='–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
            await sleep(3)
            await result_message.delete()
            await message.delete()
    except:
        await message.answer(text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏...')


@router_admin_handlers.message(Command('test'))
async def test(message: Message):
    if not is_admin(message):
        logger.warning(
            f'Somebody (not an admin) tried to access the bot logic!!! His info -> {message.from_user}')
        return
    if message.chat.type != 'private':
        return

    print(message)
    await message.answer('–°–º–æ—Ç—Ä–∏ –≤ –∫–æ–Ω—Å–æ–ª—å)')
    await sleep(10)
    await message.answer('Sleep awaited')


@router_admin_handlers.message(Command('group'))
async def command_group(message: Message):
    if not is_admin(message):
        logger.warning(
            f'Somebody (not an admin) tried to access the bot logic!!! His info -> {message.from_user}')
        return
    if message.chat.type != 'private':
        return

    groups = await db.get_group_names()
    text = '–í–∞—à–∏ –≥—Ä—É–ø–ø—ã:\n\n'
    for idx, el in enumerate(groups):
        text += f'{idx + 1}) {el["title"]}: {";".join(
            i['title'] for i in await db.get_all_chats_from_group_by_id(el["_id"]))}\n'

    await message.answer(
        text=text,
        reply_markup=await kb.group_kb(groups)
    )
